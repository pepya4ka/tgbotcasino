package com.pepyachka.mysqldbspringboot;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final UserRepository userRepository;

    public MainController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody
    String addNewUser(@RequestParam User user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request


        if (!userRepository.findById(user.getId()).isPresent()) {
            userRepository.save(user);
            return "Регистрация прошла успешно. Ваше количество монет - " + user.getCoins();
        }
        user = userRepository.findById(user.getId()).get();
        return "Вы уже зарегистрированы. Ваше количество монет - " + user.getCoins() + ". Введите вашу ставку";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path = "/getById")
    public @ResponseBody
    User getById(@RequestParam Integer id) {
        if (!userRepository.findById(id).isPresent())
            return null;
        else
            return userRepository.findById(id).get();
    }

    @GetMapping(path = "/updateCoins")
    public @ResponseBody
    User updateCoins(@RequestParam Integer id, @RequestParam Integer coins) {
        User user = userRepository.findById(id).get();
        user.setCoins(user.getCoins() + coins);
        userRepository.save(user);
        return user;
    }
    
    @GetMapping(path = "/getCoins")
    public @ResponseBody
    String updateCoins(@RequestParam Integer id) {
        User user = userRepository.findById(id).get();
        return user.getCoins().toString();
    }

}
